{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/user-form/user-form.component.ts","./src/app/components/user-form/user-form.component.html","./src/app/components/user-list/user-list.component.ts","./src/app/components/user-list/user-list.component.html","./src/app/guard/auth.guard.ts","./src/app/model/login.ts","./src/app/services/authservice.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { UserFormComponent } from './components/user-form/user-form.component';\r\nimport { UserListComponent } from './components/user-list/user-list.component';\r\nimport { AuthGuard } from './guard/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'userform',\r\n    component: UserFormComponent\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: '/userform',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'userlist', \r\n    canActivate:[AuthGuard],\r\n    component: UserListComponent\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'client';\r\n}\r\n","<div class=\"contentBody\">\r\n  <router-outlet></router-outlet>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { UserFormComponent } from './components/user-form/user-form.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { UserListComponent } from './components/user-list/user-list.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AuthGuard } from './guard/auth.guard';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    UserFormComponent,\r\n    LoginComponent,\r\n    UserListComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [AuthGuard],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Login } from './../../model/login';\r\nimport { AuthserviceService } from './../../services/authservice.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n\r\n  user: Login;\r\n  loginForm!: FormGroup;\r\n  constructor(public fb: FormBuilder, private http: HttpClient, private Auth: AuthserviceService, private router: Router) {\r\n    this.user = new Login();\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      username: [null, Validators.required],\r\n      password: [null, Validators.required],\r\n    });\r\n  }\r\n  get username(): FormControl {\r\n    return this.loginForm.get('name') as FormControl;\r\n  }\r\n\r\n  get password(): FormControl {\r\n    return this.loginForm.get('email') as FormControl;\r\n  }\r\n  onSubmit() {\r\n    console.log('submit')\r\n  }\r\n  login(username:any,password:any) {\r\n\r\n    this.Auth.postLogin({username, password}).subscribe(data => {\r\n        this.Auth.Authdata = data;\r\n        localStorage.setItem('jwt', data.token)\r\n        this.router.navigate(['/userlist'])\r\n    },(err)=>{console.log('error',err)})\r\n     console.log(username);\r\n     console.log(password);\r\n  }\r\n}\r\n","<div class=\"container p-5 my-container-class position-absolute top-50 start-50 translate-middle\" style=\"width: 40rem;\">\r\n  <form [formGroup]=\"loginForm\">\r\n    <div class=\"row\">\r\n        <div class=\"col-8\">\r\n          <h2 class=\"fw-bold\">LOGIN</h2>\r\n          <h5>Accessing the user list</h5>\r\n        </div>\r\n        <div class=\"col-4\">\r\n          <a type=\"button\" class=\"btn btn-secondary position-absolute top-2 end-0 mx-5\" routerLink=\"/\">BACK</a>\r\n        </div>\r\n      </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <p>\r\n          <label for=\"username\" class=\"form-label\">User Name </label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" name=\"name\"  formControlName=\"username\" #username>\r\n        </p>\r\n        <span\r\n          *ngIf=\"(loginForm.controls.username.touched || loginForm.controls.username.dirty) && !loginForm.controls.username.valid && loginForm.get('username')?.hasError('required') \"\r\n          class=\"error\">\r\n          Name field is required!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-12\">\r\n        <p>\r\n          <label for=\"password\" class=\"form-label\">Password </label>\r\n          <input type=\"password\" id=\"password\" class=\"form-control\" name=\"password\" #password\r\n            formControlName=\"password\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(loginForm.controls.password.touched || loginForm.controls.password.dirty) && !loginForm.controls.password.valid && loginForm.get('password')?.hasError('required')\"\r\n          class=\"error\">\r\n          Email field is required!\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-2\">\r\n        <button type=\"button\" class=\"btn btn-secondary position-absolute start-50 translate-middle-x \" (click)=\"login(username.value,password.value)\">LOGIN</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl\r\n} from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-form',\r\n  templateUrl: './user-form.component.html',\r\n  styleUrls: ['./user-form.component.css','../../../styles.css']\r\n})\r\nexport class UserFormComponent implements OnInit {\r\n\r\n  nameRef: string = 'user-form'\r\n  Position: string[] = ['Back-end Developer', 'Font-end Developer', 'Software Intern'];\r\n  userForm!: FormGroup;\r\n  emailPattern: string = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\";\r\n\r\n\r\n  constructor(public fb: FormBuilder, private http: HttpClient) {}\r\n\r\n  ngOnInit(): void {\r\n    this.userForm = this.fb.group({\r\n      name: [null, Validators.required],\r\n      email: [null, [Validators.required, Validators.pattern(this.emailPattern)]],\r\n      photo: [null, Validators.required],\r\n      startDate: [\"\", Validators.required],\r\n      positionName: [null, Validators.required],\r\n      department: [null, Validators.required],\r\n      university: [null, Validators.required],\r\n      graduation: [null, Validators.required],\r\n      previousJob: [null, Validators.required],\r\n      previousPosition: [null, Validators.required],\r\n      totalExperience: [null, Validators.required],\r\n      technicalSkills: [null, [Validators.required, Validators.minLength(20)]],\r\n      about: [null, [Validators.required, Validators.minLength(150)]]\r\n    });\r\n  }\r\n\r\n  get name(): FormControl {\r\n    return this.userForm.get('name') as FormControl;\r\n  }\r\n\r\n  get email(): FormControl {\r\n    return this.userForm.get('email') as FormControl;\r\n  }\r\n\r\n  get photo(): FormControl {\r\n    return this.userForm.get('photo') as FormControl;\r\n  }\r\n\r\n  get startDate(): FormControl {\r\n    return this.userForm.get('startDate') as FormControl;\r\n  }\r\n\r\n  get positionName(): FormControl {\r\n    return this.userForm.get('positionName') as FormControl;\r\n  }\r\n\r\n  get department(): FormControl {\r\n    return this.userForm.get('department') as FormControl;\r\n  }\r\n\r\n  get university(): FormControl {\r\n    return this.userForm.get('university') as FormControl;\r\n  }\r\n\r\n  get graduation(): FormControl {\r\n    return this.userForm.get('graduation') as FormControl;\r\n  }\r\n\r\n  get previousJob(): FormControl {\r\n    return this.userForm.get('previousJob') as FormControl;\r\n  }\r\n\r\n  get previousPosition(): FormControl {\r\n    return this.userForm.get('previousPosition') as FormControl;\r\n  }\r\n\r\n  get totalExperience(): FormControl {\r\n    return this.userForm.get('totalExperience') as FormControl;\r\n  }\r\n\r\n  get technicalSkills(): FormControl {\r\n    return this.userForm.get('technicalSkills') as FormControl;\r\n  }\r\n\r\n  get about(): FormControl {\r\n    return this.userForm.get('about') as FormControl;\r\n  }\r\n\r\n  changePosition(e: any) {\r\n    this.positionName?.setValue(e.target.value, {\r\n      onlySelf: true,\r\n    });\r\n  }\r\n\r\n  onFileChange(event: any) {\r\n     const file = event.target.files[0];\r\n     console.log(file);\r\n     this.userForm.patchValue({\r\n      photo: file\r\n     });\r\n     console.log(this.userForm);\r\n  }\r\n\r\n  onSubmit() {\r\n    var formData: any = new FormData();\r\n    formData.append('fullname', this.userForm.get('name')?.value);\r\n    formData.append('email', this.userForm.get('email')?.value);\r\n    formData.append('file', this.userForm.get('photo')?.value);\r\n    formData.append('firstJobDay', this.userForm.get('startDate')?.value);\r\n    formData.append('totalWorkTime', this.userForm.get('totalExperience')?.value);\r\n    formData.append('university', this.userForm.get('university')?.value);\r\n    formData.append('graduationTime', this.userForm.get('graduation')?.value);\r\n    formData.append('workTitle', this.userForm.get('position')?.value);\r\n    formData.append('previousWorkTitle', this.userForm.get('previousPosition')?.value);\r\n    formData.append('previousJob', this.userForm.get('previousJob')?.value);\r\n    formData.append('skills', this.userForm.get('technicalSkills')?.value);\r\n    formData.append('description', this.userForm.get('about')?.value);\r\n    formData.append('department', this.userForm.get('department')?.value);\r\nconsole.log(this.userForm.get('photo')?.value);\r\nconsole.log(this.userForm.get('name')?.value);\r\n    // const headers= new HttpHeaders()\r\n    // .set(\"x-access-token\", localStorage.getItem(\"jwt\"));\r\n\r\n    this.http\r\n      .post('http://localhost:4000/api/user', formData)\r\n      .subscribe({\r\n        next: (response) => console.log(response),\r\n        error: (error) => console.log(error),\r\n      });\r\n\r\n    this.validateAllFormFields(this.userForm);\r\n  }\r\n\r\n  validateAllFormFields(formGroup: FormGroup) {\r\n    Object.keys(formGroup.controls).forEach(field => {\r\n      const control = formGroup.get(field);\r\n      control?.markAsTouched({ onlySelf: true });\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container mt-5 mb-2 p-5 my-container-class\">\r\n  <form [formGroup]=\"userForm\">\r\n    <div class=\"row\">\r\n      <div class=\"col-8\">\r\n        <h2>Welcome</h2>\r\n        <h6>TELL US ABOUT YOURSELF</h6>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <a type=\"button\" class=\"btn btn-secondary\" routerLink=\"/login\">Admin Panel</a>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"name\" class=\"form-label\">Full Name </label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" placeholder=\"Name Surname\"\r\n            formControlName=\"name\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.name.touched || userForm.controls.name.dirty) && !userForm.controls.name.valid && userForm.get('name')?.hasError('required') && name.errors?.required\"\r\n          class=\"error\">\r\n          Name field is required!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"email\" class=\"form-label\">Email </label>\r\n          <input type=\"text\" id=\"email\" class=\"form-control\" name=\"email\" placeholder=\"name@example.com\"\r\n            formControlName=\"email\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.email.touched || userForm.controls.email.dirty) && !userForm.controls.email.valid && userForm.get('email')?.hasError('required') && email.errors?.required\"\r\n          class=\"error\">\r\n          Email field is required!\r\n        </span>\r\n        <span\r\n          *ngIf=\"(userForm.controls.email.touched || userForm.controls.email.dirty) && !userForm.controls.email.valid && userForm.get('email')?.hasError('pattern') && email.errors?.pattern\"\r\n          class=\"error\">\r\n          Email should be valid!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"photo\" class=\"form-label\">Photo </label>\r\n          <input type=\"file\" id=\"photo\" class=\"form-control\" name=\"photo\" formControlName=\"photo\"\r\n            (change)=\"onFileChange($event)\" value=\"\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.photo.touched || userForm.controls.photo.dirty) && userForm.controls.photo.touched && !userForm.controls.photo.valid && userForm.get('photo')?.hasError('required') && photo.errors?.required\"\r\n          class=\"error\">\r\n          Photo is required!\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"startDate\" class=\"form-label\">Orion Start Date </label>\r\n          <input type=\"date\" id=\"startDate\" class=\"form-control\" name=\"startDate\" formControlName=\"startDate\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.startDate.touched || userForm.controls.startDate.dirty) && userForm.controls.startDate.touched && userForm.get('startDate')?.hasError('required') && startDate.errors?.required\"\r\n          class=\"error\">\r\n          Start Date is required!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"position\" class=\"form-label\"> Position </label>\r\n          <select formControlName=\"positionName\" class=\"form-control\" (change)=\"changePosition($event)\">\r\n            <option [ngValue]=\"null\">Select Position</option>\r\n            <option *ngFor=\"let position of Position\" [value]=\"position\">{{position}}</option>\r\n          </select>\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.positionName.touched || userForm.controls.positionName.dirty) && !userForm.controls.positionName.valid && userForm.get('positionName')?.hasError('required') && positionName.errors?.required\"\r\n          class=\"error\">\r\n          Position is required!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"department\" class=\"form-label\">Department </label>\r\n          <input type=\"text\" id=\"department\" class=\"form-control\" name=\"department\" placeholder=\"NRD2208\"\r\n            formControlName=\"department\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.department.touched || userForm.controls.department.dirty) && !userForm.controls.departmentlid && userForm.get('department')?.hasError('required') && department.errors?.required\"\r\n          class=\"error\">\r\n          Department is required!\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-8\">\r\n        <p>\r\n          <label for=\"university\" class=\"form-label\">University </label>\r\n          <input type=\"text\" id=\"university\" class=\"form-control\" name=\"university\"\r\n            placeholder=\"Middle East Technical University\" formControlName=\"university\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.university.touched || userForm.controls.university.dirty) && !userForm.controls.university.valid && userForm.get('university')?.hasError('required') && university.errors?.required\"\r\n          class=\"error\">\r\n          University is required!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"graduation\" class=\"form-label\">Graduation </label>\r\n          <input type=\"date\" id=\"graduation\" class=\"form-control\" name=\"graduation\" formControlName=\"graduation\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.graduation.touched || userForm.controls.graduation.dirty) && !userForm.controls.graduation.valid && userForm.get('graduation')?.hasError('required') && graduation.errors?.required\"\r\n          class=\"error\">\r\n          Graduation is required!\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"previousJob\" class=\"form-label\">Previous Job </label>\r\n          <input type=\"text\" id=\"previousJob\" class=\"form-control\" name=\"previousJob\" placeholder=\"Corporate Consulting\"\r\n            formControlName=\"previousJob\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.previousJob.touched || userForm.controls.previousJob.dirty) && !userForm.controls.previousJob.valid && userForm.get('previousJob')?.hasError('required') && previousJob.errors?.required\"\r\n          class=\"error\">\r\n          Previous Job is required!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"previousPosition\" class=\"form-label\">Previous Position </label>\r\n          <input type=\"text\" id=\"previousPosition\" class=\"form-control\" name=\"previousPosition\"\r\n            placeholder=\"Front-end Developer\" formControlName=\"previousPosition\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.previousPosition.touched || userForm.controls.previousPosition.dirty) && !userForm.controls.previousPosition.valid && userForm.get('previousPosition')?.hasError('required') && previousPosition.errors?.required\"\r\n          class=\"error\">\r\n          Previous Position is required!\r\n        </span>\r\n      </div>\r\n      <div class=\"col-4\">\r\n        <p>\r\n          <label for=\"totalExperience\" class=\"form-label\">Total Experience </label>\r\n          <input type=\"text\" id=\"totalExperience\" class=\"form-control\" name=\"totalExperience\" placeholder=\"5\"\r\n            formControlName=\"totalExperience\">\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.totalExperience.touched || userForm.controls.totalExperience.dirty) && !userForm.controls.totalExperience.valid && userForm.get('totalExperience')?.hasError('required') && totalExperience.errors?.required\"\r\n          class=\"error\">\r\n          Total Experience is required!\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col\">\r\n        <p>\r\n          <label for=\"technicalSkills\" class=\"form-label\">Technical Skills </label>\r\n          <textarea type=\"text\" id=\"technicalSkills\" class=\"form-control\" name=\"technicalSkills\"\r\n            placeholder=\"PHP, JavaScript..\" formControlName=\"technicalSkills\"></textarea>\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.technicalSkills.touched || userForm.controls.technicalSkills.dirty) && !userForm.controls.technicalSkills.valid && userForm.get('technicalSkills')?.hasError('required') && technicalSkills.errors?.required\"\r\n          class=\"error\">\r\n          Technical Skills is required!\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row \">\r\n      <div class=\"col\">\r\n        <p>\r\n          <label for=\"about\" class=\"form-label\">About </label>\r\n          <textarea id=\"about\" name=\"about\" class=\"form-control\" formControlName=\"about\"></textarea>\r\n        </p>\r\n        <span\r\n          *ngIf=\"(userForm.controls.about.touched || userForm.controls.about.dirty) && !userForm.controls.about.valid && userForm.get('about')?.hasError('required') && about.errors?.required\"\r\n          class=\"error\">\r\n          About field is required!\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-2 \">\r\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onSubmit()\">Submit</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.css']\n})\nexport class UserListComponent implements OnInit {\n\n  displayedColumns = ['fullname', 'orionStartDay', 'department', 'position','university'];\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h3>User List</h3>","import { AuthserviceService } from './../services/authservice.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private Auth:AuthserviceService, private router: Router) {};\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n      console.log('token',this.Auth.Authdata.token)\r\n      console.log('data',this.Auth.Authdata)\r\n\r\n      if(localStorage.getItem('jwt')) {\r\n          return true;\r\n      }else{\r\n          return false;\r\n      }\r\n  }\r\n\r\n\r\n\r\n}\r\n","export class Login {\r\n  username!: string;\r\n  password!: string;\r\n\r\n  constructor() {\r\n    this.username = '';\r\n    this.password = '';\r\n  }\r\n}\r\n","import { Login } from './../model/login';\r\nimport { LoginData } from './../model/loginData';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { retry, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthserviceService {\r\n  Authdata!: any;\r\n  apiURL = 'https://mern-generic-crud-angularr.herokuapp.com';\r\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n  currentUser = {};\r\n\r\n  constructor(private http:HttpClient) { }\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    })\r\n  }\r\n\r\n  postLogin(data: Login): Observable<LoginData> {\r\n    return this.http\r\n    .post<LoginData>(this.apiURL + '/api/account/login', data)\r\n    .pipe(retry(1), catchError(this.handleError));\r\n  }\r\n\r\n\r\n  handleError(error: any) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Get client-side error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Get server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(() => {\r\n      return errorMessage;\r\n    });\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}